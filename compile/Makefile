#########################################################################
#									#
#									#
#  Makefile for STM32 version of the Xinu operating system		#
#									#
#  includes: .deps and .defs						#
#									#
#									#
#########################################################################

COMPILER_ROOT	=	/usr/bin/arm-none-eabi-
PNAME		=	STM32
PLAT		=	Platform_$(PNAME)
TOPDIR		=	..

CC		=	${COMPILER_ROOT}gcc
LD		=	${COMPILER_ROOT}ld
OBJCOPY		=	${COMPILER_ROOT}objcopy
OBJDUMP		=	${COMPILER_ROOT}objdump
QEMU		=	/usr/local/bin/qemu-system-arm
XINU		=	$(TOPDIR)/compile/xinu.elf
XINUBIN		=	$(TOPDIR)/compile/xinu.bin
XINUBOOT	=	$(TOPDIR)/compile/xinu
BUILDMAKE	=	$(TOPDIR)/compile/bin/build-make
MKVERS		=	$(TOPDIR)/compile/bin/mkvers

MAKEDEP		=	$(CC) -M -MG

DEPSFILE	=	.deps
DEFSFILE	=	.defs
VERSIONFILE	=	version
LDSCRIPT	=	ld.script
MKVERS		=	$(TOPDIR)/compile/bin/mkvers
REBUILDFLAGS	=	-s $(TOPDIR)/system  debug.c 	\
			-s $(TOPDIR)/lib			\
			-s $(TOPDIR)/device/tty			\
			-s $(TOPDIR)/device/nam			\
			-s $(TOPDIR)/device/ram			\
			-s $(TOPDIR)/device/gpio		\
			-s $(TOPDIR)/device/spi			\
			-s $(TOPDIR)/device/tft			\
			-s $(TOPDIR)/shell  'xsh_rdstest*'

INCLUDE		=	-I$(TOPDIR)/include
DEFS		= 	-DBSDURG -DVERSION=\""`cat $(VERSIONFILE)`"\"

# Compiler flags
CFLAGS  = -mcpu=cortex-m3 -mno-unaligned-access -mthumb -fno-builtin -fno-stack-protector -nostdlib -c -Wall ${DEFS} ${INCLUDE}
SFLAGS  = ${INCLUDE}

# Loader flags

LDFLAGS = -dn -m armelf -Map xinu.map -T ld.script

all:	xinu

#--------------------------------------------------------------------------------
# Handle generation of a new version string when initialize is recompiled
#--------------------------------------------------------------------------------

newversion:
	@echo creating new version
	@$(MKVERS) $(PNAME) > version

#--------------------------------------------------------------------------------
# Include generic make targets and rules from the file generated by build-make
#--------------------------------------------------------------------------------
-include $(DEFSFILE)

#--------------------------------------------------------------------------------
# Add files that require special rules and place start.o at the front
#--------------------------------------------------------------------------------
LD_LIST = binaries/start.o $(filter-out binaries/start.o,$(OBJ_FILES))

#------------------------------------------------------------
# Rules for files that need special handling
#------------------------------------------------------------

# Define variables for the Configuration file and generated files

CONFFILE	= $(TOPDIR)/config/Configuration
CONFH		= $(TOPDIR)/include/conf.h
CONFC		= $(TOPDIR)/system/conf.c

# Define variables for the config program and its sources

CONFPGM		= $(TOPDIR)/config/config
CONFL		= $(TOPDIR)/config/config.l
CONFY		= $(TOPDIR)/config/config.y

# Set up the required build directory structure

BLDDIRS	= binaries
export

#--------------------------------------------------------------------------------
# Specific additional rules and exceptions
#--------------------------------------------------------------------------------

xinu:	Makefile rebuild $(BLDDIRS) $(DEFSFILE) $(DEPSFILE) $(CONFH) $(CONFC) $(LD_LIST)
	@echo;echo 'Loading object files to produce xinu'
	@$(LD) $(LDFLAGS) $(LD_LIST) -o $(XINU) -L/usr/lib/gcc/arm-none-eabi/6.3.1/ --print-memory-usage
	@echo "Creating Binary..."
	@$(OBJCOPY) -O binary $(XINU) $(XINUBIN)

examine-all:
	$(OBJDUMP) -D $(XINU) | less

examine-header:
	$(OBJDUMP) -x $(XINU) | less

flash:
	stm32flash -w $(XINUBIN) -v /dev/ttyUSB0

qemu:
	$(QEMU) -serial stdio -M stm32-f103c8 -kernel $(XINUBIN) 
monitor:
	$(QEMU) -monitor stdio -serial stdio -M stm32-f103c8 -kernel $(XINUBIN) 

$(BLDDIRS): 
	@mkdir -p $(BLDDIRS)

objects: $(LD_LIST)

$(CONFH): $(CONFFILE) $(CONFPGM)
	@echo making $(CONFH)
	@make configure

$(CONFC): $(CONFFILE) $(CONFPGM)
	@echo making $(CONFC)
	@make configure

$(CONFPGM): $(CONFL) $(CONFY)
	@echo making the config program
	@make -C $(TOPDIR)/config clean all install

configure:
	@echo forcing a rebuild of conf.h and conf.c
	@make newversion
	@(cd $(TOPDIR)/config; make install)

clean:
	@echo removing .o files
	@rm -f ${LD_LIST}
	@echo   removing configuration files ...
	@rm -f $(CONFH) $(CONFC)
	@(cd $(TOPDIR)/config; make clean)
	@echo removing xinu ...
	@rm -f $(XINU)
	@rm -f $(XINUBIN)
	@rm -f $(XINUBOOT)

#--------------------------------------------------------------------------------
# Locations of source directories and exceptions (.c and .[sS] files to exclude)
#--------------------------------------------------------------------------------
	
$(DEFSFILE):
	@rm -f $(DEFSFILE)
	@echo "" > $(DEFSFILE)
	@make rebuild

$(DEPSFILE):
	@rm -f $(DEPSFILE)
	@echo "" > $(DEPSFILE)
	@make depend

rebuild: $(CONFC)
	@echo Rebuilding the $(DEFSFILE) file
	@$(BUILDMAKE) $(REBUILDFLAGS) > $(DEFSFILE)

defclean:
	rm -f $(DEFSFILE)
	echo "" > $(DEFSFILE)

depend: $(DEFSFILE)
	@echo;echo Making all dependencies in $(DEPSFILE)
	@$(MAKEDEP) ${INCLUDE} ${SRC_FULL} > $(DEPSFILE)
	@echo;echo Finished making dependencies

depclean:
	rm -f $(DEPSFILE)
	echo "" > $(DEPSFILE)

-include $(DEPSFILE)
